#!/bin/bash

# The MIT License (MIT)
#
# Copyright (c) 2016 Mengdi Gao
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# https://gist.github.com/losisli/11081793
function generate-certs() {
	CN=$1

	# root cert
	ipsec pki --gen --outform pem > /etc/ipsec.d/private/caKey.pem
	ipsec pki --self --in /etc/ipsec.d/private/caKey.pem \
		--dn "C=CN, O=strongSwan, CN=strongSwan CA" \
		--ca --outform pem > /etc/ipsec.d/cacerts/caCert.pem

	# server cert
	ipsec pki --gen --outform pem > /etc/ipsec.d/private/serverKey.pem
	ipsec pki --pub --in /etc/ipsec.d/private/serverKey.pem | ipsec pki --issue \
		--cacert /etc/ipsec.d/cacerts/caCert.pem \
		--cakey /etc/ipsec.d/private/caKey.pem \
		--dn "C=CN, O=strongSwan, CN=$CN" --san="$CN" \
		--flag serverAuth --flag ikeIntermediate \
		--outform pem > /etc/ipsec.d/certs/serverCert.pem
	openssl pkcs12 -export -inkey /etc/ipsec.d/private/serverKey.pem \
		-in /etc/ipsec.d/certs/serverCert.pem -name "server" \
		-certfile /etc/ipsec.d/cacerts/caCert.pem \
		-caname "strongSwan CA" \
		-password pass: \
		-out /etc/ipsec.d/certs/serverCert.p12

	# client cert
	ipsec pki --gen --outform pem > /etc/ipsec.d/private/clientKey.pem
	ipsec pki --pub --in /etc/ipsec.d/private/clientKey.pem | ipsec pki --issue \
		--cacert /etc/ipsec.d/cacerts/caCert.pem \
		--cakey /etc/ipsec.d/private/caKey.pem \
		--dn "C=CN, O=strongSwan, CN=client" \
		--outform pem > /etc/ipsec.d/certs/clientCert.pem
	openssl pkcs12 -export -inkey /etc/ipsec.d/private/clientKey.pem \
		-in /etc/ipsec.d/certs/clientCert.pem -name "client" \
		-certfile /etc/ipsec.d/cacerts/caCert.pem \
		-caname "strongSwan CA" \
		-password pass: \
		-out /etc/ipsec.d/certs/clientCert.p12
}

# https://wiki.strongswan.org/projects/strongswan/wiki/ForwardingAndSplitTunneling
# Continue reading: https://wiki.strongswan.org/projects/strongswan/wiki/VirtualIP
sysctl net.ipv4.ip_forward=1
sysctl net.ipv6.conf.all.forwarding=1
sysctl net.ipv6.conf.eth0.proxy_ndp=1
iptables -t nat -A POSTROUTING -s 10.8.0.0/16 -o eth0 -m policy --dir out --pol ipsec -j ACCEPT
iptables -t nat -A POSTROUTING -s 10.8.0.0/16 -o eth0 -j MASQUERADE
ip6tables -t nat -A POSTROUTING -s fd6a:6ce3:c8d8:7caa::/64 -o eth0 -m policy --dir out --pol ipsec -j ACCEPT
ip6tables -t nat -A POSTROUTING -s fd6a:6ce3:c8d8:7caa::/64 -o eth0 -j MASQUERADE

# hotfix for openssl `unable to write 'random state'` stderr
SHARED_SECRET="123$(openssl rand -base64 32 2>/dev/null)"
[ -f /etc/ipsec.secrets ] || echo ": PSK \"${SHARED_SECRET}\"" > /etc/ipsec.secrets

# configure for windows clients 
if [ -n "$CERT_CN" ] && [ ! -f /etc/ipsec.d/certs/serverCert.pem ]; then
	generate-certs $CERT_CN
	cat >> /etc/ipsec.conf <<EOF

conn win
    keyexchange=ikev2
    ike=aes256-sha1-modp1024!
    esp=aes256-sha1!
    dpdaction=clear
    dpddelay=300s
    rekey=no
    left=%defaultroute
    leftauth=pubkey
    leftsubnet=0.0.0.0/0
    leftcert=serverCert.pem
    leftid="C=CN, O=strongSwan, CN=$CERT_CN"
    right=%any
    rightauth=eap-mschapv2
    rightsourceip=10.8.0.0/16
    rightsendcert=never
    eap_identity=%any
    auto=add
EOF
	VPN_USER=${VPN_USER:-vpnuser}
	VPN_PASSWORD=${VPN_PASSWORD:-$(openssl rand -base64 32 2>/dev/null)}
    cat >> /etc/ipsec.secrets <<EOF

: RSA serverKey.pem
$VPN_USER : EAP 	"$VPN_PASSWORD"
EOF
fi

# hotfix for https://github.com/gaomd/docker-ikev2-vpn-server/issues/7
rm -f /var/run/starter.charon.pid

service ndppd start
# http://wiki.loopop.net/doku.php?id=server:vpn:strongswanonopenvz
/usr/sbin/ipsec start --nofork
